name: Continuous Integration

on:
  push:
    branches:
      - master
      - develop
      - feature/*

  pull_request:
    branches:
      - develop

jobs:
  lint:
    runs-on: ubuntu-24.04

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with: {python-version: "3.12"}

      - name: Install codespell
        run: pip3 install codespell

      # - name: Lint
      #   if: always()
      #   run: cmake -D FORMAT_COMMAND=clang-format-18 -P cmake/lint.cmake || echo ignored

      - name: Spell check
        if: always()
        run: cmake -P cmake/spell.cmake || echo ignored

  coverage:
    needs: [lint]

    runs-on: ubuntu-24.04

    # To enable coverage, delete the last line from the conditional below and
    # edit the "<name>" placeholder to your GitHub name.
    # If you do not wish to use codecov, then simply delete this job from the
    # workflow.
    if: github.repository_owner == '<name>'

    steps:
      - uses: actions/checkout@v4

      - name: Install LCov
        run: sudo apt-get update -q
          && sudo apt-get install ninja-build lcov -q -y

      - name: Configure
        run: cmake --preset=ci-coverage

      - name: Build
        run: cmake --build build/coverage -j 4

      - name: Test
        working-directory: build/coverage
        run: ctest --output-on-failure --no-tests=error -j 4

      - name: Process coverage info
        run: cmake --build build/coverage -t coverage

      - name: Submit to codecov.io
        uses: codecov/codecov-action@v4
        with:
          file: build/coverage/coverage.info

  sanitize:
    needs: [lint]

    runs-on: ubuntu-24.04

    env: {CXX: clang++-18}

    steps:
      - uses: actions/checkout@v4

      - name: Setup ninja build toolchain
        uses: aminya/setup-cpp@v1
        with:
          ninja: true

      - name: Configure
        run: cmake --preset=ci-sanitize

      - name: Build
        run: cmake --build build/sanitize -j 4

      - name: Test
        working-directory: build/sanitize
        env:
          ASAN_OPTIONS: "strict_string_checks=1:\
            detect_stack_use_after_return=1:\
            check_initialization_order=1:\
            strict_init_order=1:\
            detect_leaks=1"
          UBSAN_OPTIONS: print_stacktrace=1
        run: ctest --output-on-failure --no-tests=error -j 4

  test:
    needs: [lint]

    strategy:
      fail-fast: false
      matrix:
        os: [macos-15, ubuntu-24.04, windows-2022]

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4

      - name: Setup ninja build toolchain
        uses: aminya/setup-cpp@v1
        with:
          ninja: true

      - name: Install static analyzers
        if: matrix.os == 'ubuntu-24.04'
        run: |
          # Not used! sudo apt-get install cppcheck -y -q
          wget https://apt.llvm.org/llvm.sh
          chmod +x llvm.sh
          sudo ./llvm.sh 19 all
          sudo update-alternatives --install \
            /usr/bin/clang-tidy clang-tidy \
            /usr/bin/clang-tidy-19 150

      - name: Install llvm-19
        if: startsWith(matrix.os, 'macos')
        run: |
          brew install llvm@19
          echo 'export PATH="/opt/homebrew/opt/llvm/bin:$PATH"' >> /Users/runner/.envrc
          echo 'export LDFLAGS="-L/opt/homebrew/opt/llvm/lib"' >> /Users/runner/.envrc
          echo 'export CPPFLAGS="-L/opt/homebrew/opt/llvm/include"' >> /Users/runner/.envrc

      # see https://github.com/mathstuf/cxx-modules-sandbox/blob/master/.github/workflows/cmake.yml
      - name: Visual Studio toolchain environment
        uses: TheMrMilchmann/setup-msvc-dev@v1
        if: matrix.os == 'windows-2022'
        with:
          arch: x64

      # # see https://github.com/marketplace/actions/enable-developer-command-prompt
      # - uses: ilammy/msvc-dev-cmd@v1
      #   if: matrix.os == 'windows-2022'
      #   with:
      #     vsversion: 2022

      - name: Configure windows
        if: matrix.os == 'windows-2022'
        run: |
          Add-Content "$env:GITHUB_ENV" 'UseMultiToolTask=true'
          Add-Content "$env:GITHUB_ENV" 'EnforceProcessCountAcrossBuilds=true'
          cmake --preset=ci-windows

      - name: Configure macos
        if: matrix.os == 'macos-15'
        shell: bash
        run: |
          source /Users/runner/.envrc
          which clang++ && clang++ --version
          CXX=$(brew --prefix llvm@19)/bin/clang++ cmake --preset=ci-macos

      - name: Configure ubuntu
        if: matrix.os == 'ubuntu-24.04'
        env:
          CXX: clang++-19
        run: cmake --preset=ci-ubuntu

      - name: Build
        run: cmake --build build --config Debug -j 4

      - name: Install
        run: cmake --install build --config Debug  # see CMakePresets.json! --prefix stagedir

      - name: Test
        working-directory: build
        run: ctest --output-on-failure --no-tests=error -C Debug -j 4

  docs:
    # Deploy docs only when builds succeed
    needs: [sanitize, test]

    runs-on: ubuntu-24.04

    # To enable, first you have to create an orphaned gh-pages branch:
    #
    #    git switch --orphan gh-pages
    #    git commit --allow-empty -m "Initial commit"
    #    git push -u origin gh-pages
    #
    # Edit the <name> placeholder below to your GitHub name, so this action
    # runs only in your repository and no one else's fork. After these, delete
    # this comment and the last line in the conditional below.
    # If you do not wish to use GitHub Pages for deploying documentation, then
    # simply delete this job similarly to the coverage one.
    if: github.ref == 'refs/heads/master'
      && github.event_name == 'push'
      && github.repository_owner == '<name>'

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with: {python-version: "3.12"}

      - name: Install m.css dependencies
        run: pip3 install ninja jinja2 Pygments

      - name: Install Doxygen
        run: sudo apt-get update -q
          && sudo apt-get install doxygen -q -y

      - name: Build docs
        run: cmake "-DPROJECT_SOURCE_DIR=$PWD" "-DPROJECT_BINARY_DIR=$PWD/build"
          -P cmake/docs-ci.cmake

      - name: Deploy docs
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: build/docs/html
